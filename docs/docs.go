// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/shuklarituparn",
            "email": "rtprnshukla@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/ads/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Advertisements"
                ],
                "summary": "Create a new advertisement",
                "operationId": "create-advertisement",
                "parameters": [
                    {
                        "description": "Ad object to be created",
                        "name": "ad",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateAd"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Ad Added",
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateAdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/ads/get": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Advertisements"
                ],
                "summary": "Retrieve a single advertisement",
                "operationId": "get-advertisement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Advertisement ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Advertisement Data",
                        "schema": {
                            "$ref": "#/definitions/controllers.ReadAdResponse"
                        }
                    },
                    "400": {
                        "description": "Advertisement ID is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Advertisement not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/ads/get/all": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Advertisements"
                ],
                "summary": "Retrieve a list of advertisements",
                "operationId": "get-all-advertisements",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "price",
                        "description": "Field to sort by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "DESC",
                        "description": "Sort order (ASC or DESC)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Minimum price",
                        "name": "min",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum price",
                        "name": "max",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Advertisements Data",
                        "schema": {
                            "$ref": "#/definitions/controllers.ReadAllAdsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid page_size or page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/ads/search": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search Ads"
                ],
                "summary": "Search for ads",
                "operationId": "search-ads",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Field to sort by (default rating)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (ASC or DESC, default DESC)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Minimum price",
                        "name": "min",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum price",
                        "name": "max",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching ads",
                        "schema": {
                            "$ref": "#/definitions/controllers.SearchAdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid search query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error encoding response",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/users/login": {
            "post": {
                "description": "Log in a user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginUserModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logged In Successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/refresh": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Refresh JWT access and refresh tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT tokens",
                "responses": {
                    "200": {
                        "description": "New access and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/controllers.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/register": {
            "post": {
                "description": "Register a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterUserModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Created Successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Healthcheck"
                ],
                "summary": "Perform health check",
                "operationId": "health-check",
                "responses": {
                    "200": {
                        "description": "Health check response",
                        "schema": {
                            "$ref": "#/definitions/controllers.HealthCheckResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.CreateAdResponse": {
            "type": "object",
            "properties": {
                "ad": {
                    "$ref": "#/definitions/models.Ad"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.CreateUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "controllers.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "current_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "controllers.ReadAdResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Ad"
                }
            }
        },
        "controllers.ReadAllAdsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Ad"
                    }
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "controllers.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "refresh": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "controllers.SearchAdResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Ad"
                    }
                }
            }
        },
        "models.Ad": {
            "type": "object",
            "required": [
                "ad_text",
                "image_address",
                "price",
                "title"
            ],
            "properties": {
                "ad_text": {
                    "type": "string",
                    "maxLength": 500
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_address": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "title": {
                    "type": "string",
                    "maxLength": 100
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.CreateAd": {
            "type": "object",
            "required": [
                "ad_text",
                "image_address",
                "price",
                "title"
            ],
            "properties": {
                "ad_text": {
                    "type": "string",
                    "maxLength": 500
                },
                "image_address": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "title": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "models.LoginUserModel": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "models.RegisterUserModel": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Marketplace API",
	Description:      "Marketplace Api Docs",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
