definitions:
  controllers.CreateAdResponse:
    properties:
      ad:
        $ref: '#/definitions/models.Ad'
      message:
        type: string
    type: object
  controllers.CreateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      message:
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controllers.HealthCheckResponse:
    properties:
      author:
        type: string
      current_time:
        type: string
      status:
        type: string
    type: object
  controllers.LoginResponse:
    properties:
      access_token:
        type: string
      email:
        type: string
      id:
        type: integer
      message:
        type: string
      refresh_token:
        type: string
    type: object
  controllers.ReadAdResponse:
    properties:
      data:
        $ref: '#/definitions/models.Ad'
    type: object
  controllers.ReadAllAdsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Ad'
        type: array
      total_pages:
        type: integer
    type: object
  controllers.RefreshTokenResponse:
    properties:
      refresh:
        type: string
      token:
        type: string
    type: object
  controllers.SearchAdResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Ad'
        type: array
    type: object
  models.Ad:
    properties:
      ad_text:
        maxLength: 500
        type: string
      created_at:
        type: string
      id:
        type: integer
      image_address:
        type: string
      price:
        type: number
      title:
        maxLength: 100
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - ad_text
    - image_address
    - price
    - title
    type: object
  models.CreateAd:
    properties:
      ad_text:
        maxLength: 500
        type: string
      image_address:
        type: string
      price:
        type: number
      title:
        maxLength: 100
        type: string
    required:
    - ad_text
    - image_address
    - price
    - title
    type: object
  models.LoginUserModel:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.RegisterUserModel:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
info:
  contact:
    email: rtprnshukla@gmail.com
    name: API Support
    url: https://github.com/shuklarituparn
  description: Marketplace Api Docs
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Marketplace API
  version: "1.0"
paths:
  /api/v1/ads/create:
    post:
      consumes:
      - application/json
      operationId: create-advertisement
      parameters:
      - description: Ad object to be created
        in: body
        name: ad
        required: true
        schema:
          $ref: '#/definitions/models.CreateAd'
      produces:
      - application/json
      responses:
        "201":
          description: Ad Added
          schema:
            $ref: '#/definitions/controllers.CreateAdResponse'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new advertisement
      tags:
      - Advertisements
  /api/v1/ads/get:
    get:
      consumes:
      - application/json
      operationId: get-advertisement
      parameters:
      - description: Advertisement ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Advertisement Data
          schema:
            $ref: '#/definitions/controllers.ReadAdResponse'
        "400":
          description: Advertisement ID is required
          schema:
            type: string
        "404":
          description: Advertisement not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Retrieve a single advertisement
      tags:
      - Advertisements
  /api/v1/ads/get/all:
    get:
      consumes:
      - application/json
      operationId: get-all-advertisements
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      - default: price
        description: Field to sort by
        in: query
        name: sort_by
        type: string
      - default: DESC
        description: Sort order (ASC or DESC)
        in: query
        name: sort_order
        type: string
      - description: Minimum price
        in: query
        name: min
        type: string
      - description: Maximum price
        in: query
        name: max
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Advertisements Data
          schema:
            $ref: '#/definitions/controllers.ReadAllAdsResponse'
        "400":
          description: Invalid page_size or page
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Retrieve a list of advertisements
      tags:
      - Advertisements
  /api/v1/ads/search:
    get:
      operationId: search-ads
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - description: Field to sort by (default rating)
        in: query
        name: sort_by
        type: string
      - description: Sort order (ASC or DESC, default DESC)
        in: query
        name: sort_order
        type: string
      - description: Minimum price
        in: query
        name: min
        type: string
      - description: Maximum price
        in: query
        name: max
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of matching ads
          schema:
            $ref: '#/definitions/controllers.SearchAdResponse'
        "400":
          description: Invalid search query
          schema:
            type: string
        "500":
          description: Error encoding response
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Search for ads
      tags:
      - Search Ads
  /api/v1/users/login:
    post:
      consumes:
      - application/json
      description: Log in a user with email and password
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserModel'
      produces:
      - application/json
      responses:
        "200":
          description: Logged In Successfully
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Log in a user
      tags:
      - Authentication
  /api/v1/users/refresh:
    get:
      consumes:
      - application/json
      description: Refresh JWT access and refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: New access and refresh tokens
          schema:
            $ref: '#/definitions/controllers.RefreshTokenResponse'
        "400":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Refresh JWT tokens
      tags:
      - Authentication
  /api/v1/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserModel'
      produces:
      - application/json
      responses:
        "201":
          description: User Created Successfully
          schema:
            $ref: '#/definitions/controllers.CreateUserResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /healthcheck:
    get:
      operationId: health-check
      produces:
      - application/json
      responses:
        "200":
          description: Health check response
          schema:
            $ref: '#/definitions/controllers.HealthCheckResponse'
      summary: Perform health check
      tags:
      - Healthcheck
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
